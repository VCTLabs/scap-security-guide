[tox]
envlist = tools,install,sync,tests,clean
skip_missing_interpreters = true
skipsdist = true

[base]
deps =
    pip>=21.1
    build
    cmake
    ninja

[testenv]
skip_install = true
install_command = pip install {opts} {packages}

[testenv:{tools,install}]
# these 2 tox env cmds share a virtual env using the following plugin
# https://github.com/masenf/tox-ignore-env-name-mismatch
envdir = {toxworkdir}/venv
runner = ignore_env_name_mismatch

description =
    install: Run build_product to install a single product (default: openembedded)
    tools: Install openscap tools into shared {env:PREFIX} path (default: venv)

allowlist_externals =
    bash

changedir =
    tools: ext/openscap

deps =
    {[base]deps}
    ext/ymltoxml
    -r requirements-base.txt

setenv =
    CFLAGS = -march=native -O2 -g -DNDEBUG
    CXXFLAGS = {env:CFLAGS:-march=native -O2 -g -DNDEBUG}
    LDFLAGS = {env:CFLAGS:-march=native -O2 -g -DNDEBUG -Wl,-O1}
    PREFIX = {env:PREFIX:{envdir}}
    LD_LIBRARY_PATH = {env:LD_LIBRARY_PATH:{env:PREFIX}/lib:{env:PREFIX}/lib64}
    PKG_CONFIG_PATH = {env:PREFIX}/lib64/pkgconfig
    PYTHONPATH = {toxinidir}
    OPENSCAP_ROOT_DIR = {env:PREFIX:{envdir}}
    XSLT_PREFIX = {env:XSLT_PREFIX:{envdir}}
    PYTHONWARNINGS = ignore

passenv =
    CC
    CXX
    LD
    AR
    NM
    RANLIB
    {[testenv:sync]passenv}

commands =
    tools: cmake -G {posargs:"Unix Makefiles"} -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX={env:PREFIX}
    #install: cmake -G {posargs:"Unix Makefiles"} -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSSG_BATS_TESTS_ENABLED=OFF -DCMAKE_INSTALL_PREFIX={env:PREFIX}
    tools: cmake --build build -j 4 --target install
    tools: oscap --version
    install: bash {toxinidir}/build_product {posargs:"openembedded"}

[testenv:sync]
skip_install = true
description =
    Install repolite and use it for handling workflow deps

passenv =
    REPO_CFG
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    CI
    LANG
    LC_COLLATE
    SSH_*
    GID
    UID
    XDG_*
    PIP_DOWNLOAD_CACHE

deps =
    # logging_tree
    pip>=22.1
    repolite @ https://github.com/sarnold/repolite/releases/download/0.4.1/repolite-0.4.1-py3-none-any.whl

commands =
    repolite {posargs:--quiet}

[testenv:tests]
skip_install = true
description =
    Run the full SSG content test suite via ctest

setenv =
    CFLAGS = -march=native -O2 -g -DNDEBUG
    CXXFLAGS = {env:CFLAGS:-march=native -O2 -g -DNDEBUG}
    LDFLAGS = {env:CFLAGS:-march=native -O2 -g -DNDEBUG -Wl,-O1 -Wl,--as-needed}
    PREFIX = {env:PREFIX:{envdir}}
    PYTHONPATH = {toxinidir}

passenv =
    CC
    CXX
    LD
    AR
    NM
    RANLIB
    PYTHON
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    CI
    XDG_*
    GITHUB*
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash

deps =
    {[base]deps}
    cmake
    ninja
    -r docs/requirements.txt

commands =
    cmake -G {posargs:Ninja} -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo
    cmake --build build -j4
    ctest -V -j4 --rerun-failed --output-on-failure --test-dir build/

[testenv:clean]
skip_install = true
description =
    Clean the cmake build tree

allowlist_externals =
    bash

deps =
    pip>=21.1

commands =
    bash -c 'rm -rf dist/ build/* ext/openscap/build/*'

[testenv:lint]
passenv =
    CI
    PYTHONIOENCODING

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    pylint
    -r requirements.txt

commands =
    pylint --fail-under=9.75 --ignore=_version.py src/

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands =
    flake8 scripts/ src/

[testenv:mypy]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    mypy
    -r requirements.txt

commands =
    #stubgen -m munch --export-less -o {toxinidir}
    python -m mypy --follow-imports=normal --install-types --non-interactive src/

[testenv:isort]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    isort
    -r requirements.txt

commands =
    python -m isort scripts/ src/
